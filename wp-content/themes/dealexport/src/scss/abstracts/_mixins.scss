/**
 * Convert px to rem for font size with fallback
 */
@mixin fontSize($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size) !important;
}
/**
 * Convert px to rem for line-height with fallback
 */
@mixin line-height($size) {
  line-height: $size;
  line-height: calculateRem($size);
}

/**
 * Media query
 */

// A map of breakpoints.
// $breakpoints: (
//     xs: 576px,
//     sm: 768px,
//     md: 992px,
//     lg: 1200px
//   );

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

    // If one or both of the breakpoints don't exist.
  } @else {
    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {
      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {
      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

/**
 * Jupiter - add color modifier for textblock
 */
@mixin add-textblock-color-modifier($className, $color) {
  .color--#{$className}.mk-text-block *,
  .color--#{$className} {
    color: $color;
  }
}

/**
 * Typography - body text style
 */
@mixin style-body-text() {
  @include fontSize($fp);
  @include respond(phone) {
    @include fontSize(21px);
  }
  font-weight: 300;
  font-family: $family-body;
  webkit-font-smoothing: antialiased;
}

/**
 * MEDIA QUERY MANAGER
 */

/*
  0 - 600px:      Phone
  600 - 900px:    Tablet portrait
  900 - 1200px:   Tablet landscape
  1200 - 1920px:  is where our normal style apply
  1920 + :        Big desktop
 
  $breakpoint arguement choices:
  - phone
  - tab-port
  - tab-land
  - big-desktop

  1em = 16px
 */

$breakpoints: (
  phone: 37.5em,
  tab-port: 56.25em,
  tab-land: 75em,
  small-desktop: 90em,
  big-desktop: 120em,
  4k-desktop: 240em
);

@mixin respond($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

/**
 * Vendor-prefix keyframes
 */
@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}
/**
* Vendor-prefix animation
*/
@mixin animation($animate...) {
  $max: length($animate);
  $animations: "";

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation: $animations;
  -o-animation: $animations;
  animation: $animations;
}

/**
* Vendor-prefix transform
*/
@mixin transform($transforms) {
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
